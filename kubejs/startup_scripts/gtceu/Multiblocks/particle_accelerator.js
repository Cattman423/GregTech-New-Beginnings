GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
//Particle Accelerator
    event.create('particle_accelerator')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 0, 1, 2) //Max Item Inputs, Max Item Outputs, Max Fluid Inputs, Max Fluid Outputs
        //.setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ARC)
})
GTCEuStartupEvents.registry('gtceu:machine', event => {
//Particle Accelerator
    event.create('particle_accelerator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('particle_accelerator')
        .appearanceBlock(() => Block.getBlock('gtnn:mar_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('              CCC              ', '            CCCCCCCCCCCCCCCCCCC', '              CCC              ')
            .aisle('          CCCCCCCCCCCCCCCCCCCCC', '         CCCPPPPPPPPPPPPPPPPPPO', '          CCCCCCCCCCCCCCCCCCCCC')
            .aisle('        CCCCCCCCCCCCCCC        ', '       CCPPPCCCCCCCPPPCCCCCCCCC', '        CCCCCCCCCCCCCCC        ')
            .aisle('      CCCCC         CCCCC      ', '      CPPPCC       CCPPPC      ', '      CCCCC         CCCCC      ')
            .aisle('     CCCC             CCCC     ', '     CPPCC           CCPPC     ', '     CCCC             CCCC     ')
            .aisle('    CCC                 CCC    ', '    CPPC               CPPC    ', '    CCC                 CCC    ')
            .aisle('   CCC                   CCC   ', '   CPPC                 CPPC   ', '   CCC                   CCC   ')
            .aisle('   CC                     CC   ', '  CPPC                   CPPC  ', '   CC                     CC   ')
            .aisle('  CCC                     CCC  ', '  CPC                     CPC  ', '  CCC                     CCC  ')
            .aisle('  CC                       CC  ', '  CPC                     CPPC ', '  CC                       CC  ')
            .aisle(' CCC                       CCC ', ' CPC                       CPC ', ' CCC                       CCC ')
            .aisle(' CC                         CC ', ' CPC                       CPC ', ' CC                         CC ')
            .aisle(' CC                         CC ', 'CPC                         CPC', ' CC                         CC ')
            .aisle(' CC                         CC ', 'CPC                         CPC', ' CC                         CC ')
            .aisle('CCC                         CCC', 'CPC                         CPC', 'CCC                         CCC')
            .aisle('CCC                         CCC', 'CPC                         CPG', 'CCC                         CCC')
            .aisle('CCC                         CCC', 'CPC                         CPC', 'CCC                         CCC')
            .aisle(' CC                         CC ', 'CPC                         CPC', ' CC                         CC ')
            .aisle(' CC                         CC ', 'CPC                         CPC', ' CC                         CC ')
            .aisle(' CC                         CC ', 'CPPC                       CPC ', ' CC                         CC ')
            .aisle(' CCC                       CCC ', 'CPPC                       CPC ', ' CCC                       CCC ')
            .aisle(' CCC                       CC  ', 'CPPPC                     CPPC ', ' CCC                       CC  ')
            .aisle(' CCCC                     CCC  ', 'CPCPC                     CPC  ', ' CCCC                     CCC  ')
            .aisle(' C CC                     CC   ', 'CPCPPC                   CPPC  ', ' C CC                     CC   ')
            .aisle(' C CCC                   CCC   ', 'CPCCPPC                 CPPC   ', ' C CCC                   CCC   ')
            .aisle(' C  CCC                 CCC    ', 'CPC CPPC               CPPC    ', ' C  CCC                 CCC    ')
            .aisle(' C   CCCC             CCCC     ', 'CPC  CPPCC           CCPPC     ', ' C   CCCC             CCCC     ')
            .aisle(' C    CCCCC         CCCCC      ', 'CPC   CPPPCC       CCPPPC      ', ' C    CCCCC         CCCCC      ')
            .aisle(' C      CCCCCCCCCCCCCCC        ', 'CPC    CCPPPCCCCCCCPPPCC       ', ' C      CCCCCCCCCCCCCCC        ')
            .aisle(' C        CCCCCCCCCCC          ', 'CPC      CCCPPPPPPPCCC         ', ' C        CCCCCCCCCCC          ')
            .aisle(' C            CCC              ', 'CIC         CCCACCC            ', ' C            CCC              ')
            .where('A', Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks('gtnn:field_restriction_casing')
                    .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(3))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
            .where('P', Predicates.blocks('gtnn:high_speed_pipe_block'))
            .where('I', Predicates.abilities(PartAbility.IMPORT_FLUIDS))
            .where('O', Predicates.abilities(PartAbility.EXPORT_FLUIDS))
            .where('G', Predicates.abilities(PartAbility.IMPORT_ITEMS))
            .where(' ', Predicates.any())
            .build()
        )
        .workableCasingRenderer(
            'gtnn:block/casings/solid/mar_casing',
            'gtceu:block/multiblock/large_chemical_reactor', false
        )
})