GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
//Steam Engine
    event.create('circuit_assembly_line')
        .category('end_game_circuits')
        .setEUIO('in')
            .setMaxIOSize(16, 1, 4, 0) //Max Item Inputs, Max Item Outputs, Max Fluid Inputs, Max Fluid Outputs
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ASSEMBLER)
        //.setMaxTooltips(6)
})
//import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
GTCEuStartupEvents.registry('gtceu:machine', event => {
//Steam Engine
    event.create('circuit_assembly_line', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('circuit_assembly_line')
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start(/*BACK, UP, RIGHT*/)
            .aisle('CIC', 'GBG', 'DED', ' F ')
            .aisle('CIC', 'GBG', 'DED', ' F ').setRepeatable(3, 15)
            .aisle('COC', 'GBG', 'AED', ' F ')
            .where('A', Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                    .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(4)))
            .where('O', Predicates.abilities(PartAbility.EXPORT_ITEMS/*addTooltips(Component.translatable("gtceu.multiblock.pattern.location_end"))*/))
            .where('I', Predicates.blocks('gtceu:ulv_input_bus'))
            .where('F', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                    .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(3)))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('E', Predicates.blocks(GTBlocks.CASING_ASSEMBLY_CONTROL.get()))
            .where('B', Predicates.blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
            .where('D', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
            .where(' ', Predicates.any())
            .build()
        )
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/assembly_line", false
        )/*,
        event.create('assembly_line', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType(GTRecipeTypes.ASSEMBLY_LINE_RECIPES)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .appearanceBlock(CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start(BACK, UP, RIGHT)
                .aisle("FIF", "RTR", "SAG", "#Y#")
                .aisle("FIF", "RTR", "GAG", "#Y#").setRepeatable(3, 15)
                .aisle("FOF", "RTR", "GAG", "#Y#")
                .where('S', Predicates.controller(blocks(definition.getBlock())))
                .where('F', blocks(CASING_STEEL_SOLID.get())
                        .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(4)))
                .where('O', Predicates.abilities(PartAbility.EXPORT_ITEMS).addTooltips(Component.translatable("gtceu.multiblock.pattern.location_end")))
                .where('Y', blocks(CASING_STEEL_SOLID.get()).or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(3)))
                .where('I', blocks(ITEM_IMPORT_BUS[0].getBlock()))
                .where('G', blocks(CASING_GRATE.get()))
                .where('A', blocks(CASING_ASSEMBLY_CONTROL.get()))
                .where('R', blocks(CASING_LAMINATED_GLASS.get()))
                .where('T', blocks(CASING_ASSEMBLY_LINE.get()))
                .where('#', Predicates.any())
                .build())
        .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"),
                GTCEu.id("block/multiblock/assembly_line"), false)
        .compassSections(GTCompassSections.TIER[IV])
        .compassNodeSelf()
        .register()*/
})